{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","src","Movie","title","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","response","json","data","catch","err","console","log","_renderMovies","map","movie","large_cover_image","key","id","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mUAaA,SAASA,EAAT,GAA+B,IAATC,EAAQ,EAARA,OAClB,OACI,yBAAKC,IAAKD,IAgBHE,MA3Bf,YAAmC,IAAlBC,EAAiB,EAAjBA,MAAOH,EAAU,EAAVA,OACpB,OACI,6BACI,kBAACD,EAAD,CAAaC,OAAQA,IACrB,4BAAKG,KCwCFC,E,2MA3CbC,MAAQ,G,EAWRC,W,sBAAa,4BAAAC,EAAA,sEACY,EAAKC,WADjB,OACHC,EADG,OAET,EAAKC,SAAS,CACZD,WAHO,2C,EAQbD,SAAW,WACT,OAAOG,MAAM,yDACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAI9BG,cAAgB,WAId,OAHe,EAAKf,MAAMI,OAAOY,KAAI,SAAAC,GACnC,OAAO,kBAAC,EAAD,CAAOnB,MAAOmB,EAAMnB,MAAOH,OAAQsB,EAAMC,kBAAmBC,IAAKF,EAAMG,S,oFAzBhFP,QAAQC,IAAI,gB,0CAIZO,KAAKpB,e,+BA2BL,OACE,yBAAKqB,UAAU,OACZD,KAAKrB,MAAMI,OAASiB,KAAKN,gBAAkB,e,GAtClCQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.f407a4d1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nfunction Movie({ title, poster }) {\r\n    return (\r\n        <div>\r\n            <MoviePoster poster={poster} />\r\n            <h1>{title}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster}){\r\n    return (\r\n        <img src={poster}/>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string,\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n\r\n\r\nexport default Movie;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n  state = {\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log('will mount')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._getMovies()\r\n  }\r\n\r\n  _getMovies = async () => {\r\n      const movies = await this._callApi()\r\n      this.setState({\r\n        movies\r\n      })\r\n  }\r\n\r\n\r\n  _callApi = () => {\r\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\r\n      .then(response => response.json())\r\n      .then(json => json.data.movies)\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      return <Movie title={movie.title} poster={movie.large_cover_image} key={movie.id} />\r\n    })\r\n    return movies\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}